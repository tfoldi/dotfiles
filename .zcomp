# $Id: zcomp,v 1.3 1996/04/01 16:02:14 hzoli Exp $
# List of autoloaded functions used during colpletition
autoload multicomp mtoolsmatch insmodcomp
# Variables used during completition:
typeset -U groups hosts ypmaps nntpservers
hosts=( ${hosts%%.*} )
fignore=(\~ .bak .BAK .old .o)
ypmaps=(aliases passwd group netgroup hosts ethers)
nntpservers=(ludens.elte.hu goliat.eik.bme.hu sunserv.kfki.hu caesar.elte.hu faber.elte.hu ~/.knews/config-*[^~](N:t:s/config-//))
#groups=( "${${(f)$(</etc/group)}%%:*}" )
#groups=( $(cut -d: -f1 /etc/group) )
# Rmdir only real directories
compctl -g '*(/)' + -g '*(/D)' rmdir dircmp
# Strip, profile, and debug only executables.  The compctls for the
# debuggers could be better, of course.
compctl -g '*(xD)' + -g core strip gprof adb dbx xdbx ups gdb
# For rcs users, co and rlog from the RCS directory.  We don't want to see
# the RCS and ,v though.
compctl -g 'RCS/*(D:s@RCS/@@:s/,v//)' + -g '*(-/D)' \
        co rlog rcs{,diff,merge} revdiff logs mymerge cil
# Run ghostscript on postscript files, but if no postscript file matches what
# we already typed, complete directories as the postscript file may not be in
# the current directory.
compctl -g '*.(e|)ps(D)' + -g '*(-/D)' gs ghostview psps pstops psmulti psselect
# Similar things for tex, texinfo and dvi files.
compctl -g '*.tex*' + -g '*(-/D)' {,ams,{g,}sli,ma,ja}tex texi2dvi
compctl -g '*.(tex|ltx)' + -g '*(-/D)' {g,ams,}latex
compctl -g '*.dvi(D)' + -g '*(-/D)' xdvi dvips
# Anything after nohup is a command by itself with its own completion
# (the one for the trap builtin isn't perfect -- it does not complete
# signal names)
compctl -l '' nohup noglob command exec nice eval trap setsid dm - time rusage s trace truss
compctl -l '' -x 'p[1]' -B -- builtin
compctl -k hosts -x 'p[2] w[1,-l]' -u - 'w[1,-l] p[4,-1],p[2,-1]' -l '' -- rsh
compctl -k hosts -S ':' + -f + -x 'N[-1,@]' -k hosts -S ':' - \
        's[]' -u -S '@' -- rcp
# kill takes signal names as the first argument after -, but job names after %
compctl -j -P % -x 's[-] p[1]' -k signals -- kill
# gzip files, but gzip -d only gzipped or compressed files
compctl -x 'R[-*[dt],^*]' -g '*.(gz|z|Z|t[agp]z|tarZ|tz)(D)' + \
        -g '*(-/D)' + -f - \
's[]' -g '^*(.(tz|gz|t[agp]z|tarZ|zip|ZIP|jpg|JPG|gif|GIF|[zZ])|[~#])' \
        + -f -- gzip
compctl -g '*.(gz|z|Z|t[azp]z|tarZ|tz)(D)' + -g '*(-/D)' + -f gunzip zcat zless
compctl -g '*.Z(D)' + -g '*(-/D)' + -f uncompress znew
compctl -g '*.F(D)' + -g '*(-/D)' + -f melt fcat

compctl -D -f # + -U -K multicomp                                               
# su takes an username and args for the shell, the `-c' case is
# handled specially here
compctl -u -x 'w[2,-c] p[3,-1]' -l '' -- su
# Put the most often used ftp site names to 
# It saves memory if we use a file for this.
compctl -s '$(</~/ftphosts) ludens ${${(f)$(<~/.ncrecent)}%% *}' ftp tftp ncftp ncftp2
compctl -s '$(<~/ftphosts) $hosts' ping traceroute nslookup
# See func/man_glob
compctl -K man_glob -x 'c[-1,-l]' -g '*.([1-9n]|man)' + -f -- man tman
# Misc.
compctl -s '$(groups)' + -k groups newgrp
compctl -f -x 'p[1], p[2] C[-1,-*]' -k groups -- chgrp
compctl -f -x 'p[1] n[-1,.], p[2] C[-1,-*] n[-1,.]' -k groups \
        - 'p[1], p[2] C[-1,-*]' -u  -S '.' -- chown
compctl -g '*.x(D)' + -g '*(-/D)' rpcgen
compctl -g "*.[cCoa](D)" -x 's[-I][-L]' -g "*(/D)" - \
  's[-l]' -s '${(s.:.)LD_LIBRARY_PATH}/lib*.a(:t:r:s/lib//)' -- cc gcc
compctl -f -x 'p[2] C[-1,*f*~*z*]' -g "*.tar" + -g '*(-/)' + -f - \
        'p[2] C[-1,*(f*z|z*f)*]' -g "*.t(z|[agp]z|ar(.gz|.[Zz]|Z))" + \
        -g '*(-/)' + -f -- tar
compctl -u -x 's[+] c[-1,-f],s[-f+]' -g '~/Mail/*(:t)' - \
  's[-f],c[-1,-f]' -f -- mail elm
# Some builtins.
compctl -s '$(setopt 2> /dev/null)' + -o unsetopt
compctl -z -P '%' bg
compctl -j -P '%' fg jobs disown
compctl -j -P '%' + -s '`ps -x | tail +2 | cut -c1-5`' wait
compctl -A shift
compctl -caF type whence which where
compctl -c unhash
compctl -x 'w[1,-d] p[2]' -n - 'w[1,-d] p[3]' -g '*(-/)' - \
        'p[1]' -c - 'p[2]' -g '*(-x)' -- hash
compctl -F functions unfunction
compctl -a unalias
compctl -v getln getopts read unset vared
compctl -v -S '=' -q declare export integer local readonly typeset
compctl -e disable
compctl -d enable
compctl -k "(${(j: :)${(f)$(limit)}%% *})" limit unlimit
compctl -b bindkey
compctl -c -x 'C[-1,-*k]' -A - 'C[-1,-*K]' -F -- compctl
compctl -x 'C[-1,-*e]' -c - 'C[-1,-[ARWI]##]' -f -- fc
compctl -x 'p[1]' - 'p[2,-1]' -l '' -- sched
compctl -x 'C[-1,[+-]o]' -o - 'c[-1,-A]' -A -- set
compctl -l '' -x 'p[1]' -f -- . source
compctl -g '*.(C|cc|o)' g++
compctl -g '^*.(o|*~)' vi
compctl -s "\$(sed -n 's/^\([^.  :#$][^  :#]*\):.*$/\1/p' Makefile 2> /dev/null)
" \
        + -g '*.(c|C|cc)(:r)' + -s 'all install{{.,-}{man,bin},} \
        {very,dist,}clean dist depend World lint Makefile{s,} config \
        zImage zdisk zlilo' make
compctl -g '^*.(h|C|c|cc|tex|txt|doc|ps|dvi|[1-9])' nm
compctl -g '^*.(h|C|c|cc|tex|txt|doc|ps|dvi|[1-9])' nm
compctl -k '(if of conv ibs obs bs cbs files skip file seek count)' \
        -S '=' -x 's[if=], s[of=]' -f - 'C[0,conv=*,*] n[-1,,], s[conv=]' \
        -k '(ascii ebcdic ibm block unblock lcase ucase swap noerror sync)' \
        -q -S ',' - 'n[-1,=]' -X '<number>'  -- dd
compctl -x 's[-]' -s 'batch d f funcall i insert kill l load \
        no-init-file q t u user' - 's[+]' -X '<line_number>' - \
        'c[-1,-d]' -X '<display>' - 'c[-1,-f]' -X '<lisp_function>' - \
        'c[-1,-i]' -f - 'c[-1,-l]' -g '*.(el|elc)' - \
        'c[-1,-t]' -X '<terminal>'  - 'c[-1,-u]' -u - \
        's[]' -g '^*[#~]' + -g '^*[#~](D)' + -f -- emacs
compctl -x 'N[1,dmpqrtx]' -k '(c l o u v a b i)' - \
        'p[1]' -k '(d m p q r t x)' -S '' - 'p[2]' -g '*.a' - \
        'p[*]' -g '*.o' + -g '*(-/D)' -- ar
compctl -u + -c + -s '{/usr,}/sbin/*(D:t)' psgrep{,l}
compctl -c + -s '{/usr,}/sbin/*(D:t)' ps{l,m,j}grep
compctl -x 'N[-1,:/], s[]' -K mtoolsmatch -- \
csswd chage chfn userdel lastlog login
compctl -u -x 'c[-1,-s]' -s '$(</etc/shells)' -- chsh


